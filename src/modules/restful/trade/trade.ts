import { Constructor } from '../../../setters/types';
import { validateRequiredParameters } from '../../../helpers/utils';
import {
    accountInformationOptions,
    accountInformationResponse,
    accountTradeListOptions,
    accountTradeListResponse,
    allOrdersOptions,
    allOrdersResponse,
    cancelAllOpenOrdersOnASymbolOptions,
    cancelAllOpenOrdersOnASymbolResponse,
    cancelAnExistingOrderAndSendANewOrderOptions,
    cancelAnExistingOrderAndSendANewOrderResponse,
    cancelOcoOptions,
    cancelOcoResponse,
    cancelOrderOptions,
    cancelOrderResponse,
    currentOpenOrdersOptions,
    currentOpenOrdersResponse,
    getAllocationsOptions,
    getAllocationsResponse,
    getAllOcoOptions,
    getAllOcoResponse,
    getCommissionRatesResponse,
    getCurrentOrderCountUsageOptions,
    getCurrentOrderCountUsageResponse,
    getOcoOptions,
    getOcoResponse,
    getOpenOcoOptions,
    getOpenOcoResponse,
    getOrderOptions,
    getOrderResponse,
    getPreventedMatchesOptions,
    getPreventedMatchesResponse,
    newOcoOptions,
    newOcoResponse,
    newOrderOptions,
    newOrderResponse,
    newOrderSOROptions,
    newOrderSORResponse,
    testNewOrderOptions,
    testNewOrderResponse,
    testNewOrderSOROptions
} from './types';
import { TradeMethods } from './methods';
import { Side, OrderType, CancelReplaceMode } from '../../enum';

export function mixinTrade<T extends Constructor>(base: T): Constructor<TradeMethods> & T {
    return class extends base {
        /**
        * Test New Order (TRADE) {@link https://binance-docs.github.io/apidocs/spot/en/#test-new-order-trade}
        *
        * @param {string} symbol - Trading symbol, e.g. BNBUSDT
        * @param {Side} side
        * @param {OrderType} type - Order type
        * @param {object} [options]
        * @param {TimeInForce} [options.timeInForce] - Order time in force
        * @param {number} [options.quantity] - Order quantity
        * @param {number} [options.quoteOrderQty] - Quote quantity
        * @param {number} [options.price] - Order price
        * @param {string} [options.newClientOrderId] - Used to uniquely identify this cancel. Automatically generated by default
        * @param {number} [options.strategyId]
        * @param {number} [options.strategyType] - The value cannot be less than 1000000.
        * @param {number} [options.stopPrice] - Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
        * @param {number} [options.trailingDelta] - Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
        * @param {number} [options.icebergQty] - Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
        * @param {NewOrderRespType} [options.newOrderRespType] - Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
        * @param {SelfTradePreventionMode} [options.selfTradePreventionMode] - The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        * @param {boolean} [options.computeCommissionRates]
        */
        async testNewOrder(symbol: string, side: Side, type: OrderType, options?: testNewOrderOptions): Promise<Record<string, never> | testNewOrderResponse> {
            validateRequiredParameters({ symbol, side, type });
            const url = this.prepareSignedPath('/api/v3/order/test',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase(),
                        side: side,
                        type: type
                    }
                )
            );
            return await this.makeRequest('POST', url);
        }


        /**
        * Query Order (USER_DATA) {@link https://binance-docs.github.io/apidocs/spot/en/#query-order-user_data}
        *
        * @param {string} symbol - Trading symbol, e.g. BNBUSDT
        * @param {object} [options]
        * @param {number} [options.orderId] - Order id
        * @param {string} [options.origClientOrderId] - Order id from client
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async getOrder(symbol: string, options?: getOrderOptions): Promise<getOrderResponse> {
            validateRequiredParameters({ symbol });
            const url = this.prepareSignedPath('/api/v3/order',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase()
                    }
                )
            );
            return await this.makeRequest('GET', url);
        }


        /**
        * New Order (TRADE) {@link https://binance-docs.github.io/apidocs/spot/en/#new-order-trade}
        *
        * @param {string} symbol - Trading symbol, e.g. BNBUSDT
        * @param {Side} side
        * @param {OrderType} type - Order type
        * @param {object} [options]
        * @param {TimeInForce} [options.timeInForce] - Order time in force
        * @param {number} [options.quantity] - Order quantity
        * @param {number} [options.quoteOrderQty] - Quote quantity
        * @param {number} [options.price] - Order price
        * @param {string} [options.newClientOrderId] - Used to uniquely identify this cancel. Automatically generated by default
        * @param {number} [options.strategyId]
        * @param {number} [options.strategyType] - The value cannot be less than 1000000.
        * @param {number} [options.stopPrice] - Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
        * @param {number} [options.trailingDelta] - Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
        * @param {number} [options.icebergQty] - Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
        * @param {NewOrderRespType} [options.newOrderRespType] - Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
        * @param {SelfTradePreventionMode} [options.selfTradePreventionMode] - The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async newOrder(symbol: string, side: Side, type: OrderType, options?: newOrderOptions): Promise<newOrderResponse> {
            validateRequiredParameters({ symbol, side, type });
            const url = this.prepareSignedPath('/api/v3/order',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase(),
                        side: side,
                        type: type
                    }
                )
            );
            return await this.makeRequest('POST', url);
        }


        /**
        * Cancel Order (TRADE) {@link https://binance-docs.github.io/apidocs/spot/en/#cancel-order-trade}
        *
        * @param {string} symbol - Trading symbol, e.g. BNBUSDT
        * @param {object} [options]
        * @param {number} [options.orderId] - Order id
        * @param {string} [options.origClientOrderId] - Order id from client
        * @param {string} [options.newClientOrderId] - Used to uniquely identify this cancel. Automatically generated by default
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async cancelOrder(symbol: string, options?: cancelOrderOptions): Promise<cancelOrderResponse> {
            validateRequiredParameters({ symbol });
            const url = this.prepareSignedPath('/api/v3/order',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase()
                    }
                )
            );
            return await this.makeRequest('DELETE', url);
        }


        /**
        * Cancel an Existing Order and Send a New Order (Trade) {@link https://binance-docs.github.io/apidocs/spot/en/#cancel-an-existing-order-and-send-a-new-order-trade}
        *
        * @param {string} symbol - Trading symbol, e.g. BNBUSDT
        * @param {Side} side
        * @param {OrderType} type - Order type
        * @param {string} cancelReplaceMode - - `STOP_ON_FAILURE` If the cancel request fails, the new order placement will not be attempted., - `ALLOW_FAILURES` If new order placement will be attempted even if cancel request fails.
        * @param {object} [options]
        * @param {TimeInForce} [options.timeInForce] - Order time in force
        * @param {number} [options.quantity] - Order quantity
        * @param {number} [options.quoteOrderQty] - Quote quantity
        * @param {number} [options.price] - Order price
        * @param {string} [options.cancelNewClientOrderId] - Used to uniquely identify this cancel. Automatically generated by default
        * @param {string} [options.cancelOrigClientOrderId] - Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence.
        * @param {number} [options.cancelOrderId] - Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence.
        * @param {string} [options.newClientOrderId] - Used to uniquely identify this cancel. Automatically generated by default
        * @param {number} [options.strategyId]
        * @param {number} [options.strategyType] - The value cannot be less than 1000000.
        * @param {number} [options.stopPrice] - Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
        * @param {number} [options.trailingDelta] - Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
        * @param {number} [options.icebergQty] - Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
        * @param {NewOrderRespType} [options.newOrderRespType] - Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async cancelAnExistingOrderAndSendANewOrder(symbol: string, side: Side, type: OrderType, cancelReplaceMode: CancelReplaceMode, options?: cancelAnExistingOrderAndSendANewOrderOptions): Promise<cancelAnExistingOrderAndSendANewOrderResponse> {
            validateRequiredParameters({ symbol, side, type, cancelReplaceMode });
            const url = this.prepareSignedPath('/api/v3/order/cancelReplace',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase(),
                        side: side,
                        type: type,
                        cancelReplaceMode: cancelReplaceMode
                    }
                )
            );
            return await this.makeRequest('POST', url);
        }


        /**
        * Current Open Orders (USER_DATA) {@link https://binance-docs.github.io/apidocs/spot/en/#current-open-orders-user_data}
        *
        * @param {object} [options]
        * @param {string} [options.symbol] - Trading symbol, e.g. BNBUSDT
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async currentOpenOrders(options?: currentOpenOrdersOptions): Promise<currentOpenOrdersResponse[]> {

            const url = this.prepareSignedPath('/api/v3/openOrders',
                options ? options : {}
            );
            return await this.makeRequest('GET', url);
        }


        /**
        * Cancel all Open Orders on a Symbol (TRADE) {@link https://binance-docs.github.io/apidocs/spot/en/#cancel-all-open-orders-on-a-symbol-trade}
        *
        * @param {string} symbol - Trading symbol, e.g. BNBUSDT
        * @param {object} [options]
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async cancelAllOpenOrdersOnASymbol(symbol: string, options?: cancelAllOpenOrdersOnASymbolOptions): Promise<cancelAllOpenOrdersOnASymbolResponse[]> {
            validateRequiredParameters({ symbol });
            const url = this.prepareSignedPath('/api/v3/openOrders',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase()
                    }
                )
            );
            return await this.makeRequest('DELETE', url);
        }


        /**
        * All Orders (USER_DATA) {@link https://binance-docs.github.io/apidocs/spot/en/#all-orders-user_data}
        *
        * @param {string} symbol - Trading symbol, e.g. BNBUSDT
        * @param {object} [options]
        * @param {number} [options.orderId] - Order id
        * @param {number} [options.startTime] - UTC timestamp in ms
        * @param {number} [options.endTime] - UTC timestamp in ms
        * @param {number} [options.limit] - Default 500; max 1000.
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async allOrders(symbol: string, options?: allOrdersOptions): Promise<allOrdersResponse[]> {
            validateRequiredParameters({ symbol });
            const url = this.prepareSignedPath('/api/v3/allOrders',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase()
                    }
                )
            );
            return await this.makeRequest('GET', url);
        }


        /**
        * New OCO (TRADE) {@link https://binance-docs.github.io/apidocs/spot/en/#new-oco-trade}
        *
        * @param {string} symbol - Trading symbol, e.g. BNBUSDT
        * @param {Side} side
        * @param {number} quantity
        * @param {number} price - Order price
        * @param {number} stopPrice
        * @param {object} [options]
        * @param {string} [options.listClientOrderId] - A unique Id for the entire orderList
        * @param {string} [options.limitClientOrderId] - A unique Id for the limit order
        * @param {number} [options.limitStrategyId]
        * @param {number} [options.limitStrategyType] - The value cannot be less than 1000000.
        * @param {number} [options.limitIcebergQty]
        * @param {number} [options.trailingDelta]
        * @param {string} [options.stopClientOrderId] - A unique Id for the stop loss/stop loss limit leg
        * @param {number} [options.stopStrategyId]
        * @param {number} [options.stopStrategyType]
        * @param {number} [options.stopLimitPrice] - If provided, stopLimitTimeInForce is required.
        * @param {number} [options.stopIcebergQty]
        * @param {StopLimitTimeInForce} [options.stopLimitTimeInForce]
        * @param {NewOrderRespType} [options.newOrderRespType] - Set the response JSON.
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async newOco(symbol: string, side: Side, quantity: number, price: number, stopPrice: number, options?: newOcoOptions): Promise<newOcoResponse> {
            validateRequiredParameters({ symbol, side, quantity, price, stopPrice });
            const url = this.prepareSignedPath('/api/v3/order/oco',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase(),
                        side: side,
                        quantity: quantity,
                        price: price,
                        stopPrice: stopPrice
                    }
                )
            );
            return await this.makeRequest('POST', url);
        }


        /**
        * Query OCO (USER_DATA) {@link https://binance-docs.github.io/apidocs/spot/en/#query-oco-user_data}
        *
        * @param {object} [options]
        * @param {number} [options.orderListId] - Order list id
        * @param {string} [options.origClientOrderId] - Order id from client
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async getOco(options?: getOcoOptions): Promise<getOcoResponse> {

            const url = this.prepareSignedPath('/api/v3/orderList',
                options ? options : {}
            );
            return await this.makeRequest('GET', url);
        }


        /**
        * Cancel OCO (TRADE) {@link https://binance-docs.github.io/apidocs/spot/en/#cancel-oco-trade}
        *
        * @param {string} symbol - Trading symbol, e.g. BNBUSDT
        * @param {object} [options]
        * @param {number} [options.orderListId] - Order list id
        * @param {string} [options.listClientOrderId] - A unique Id for the entire orderList
        * @param {string} [options.newClientOrderId] - Used to uniquely identify this cancel. Automatically generated by default
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async cancelOco(symbol: string, options?: cancelOcoOptions): Promise<cancelOcoResponse> {
            validateRequiredParameters({ symbol });
            const url = this.prepareSignedPath('/api/v3/orderList',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase()
                    }
                )
            );
            return await this.makeRequest('DELETE', url);
        }


        /**
        * Query all OCO (USER_DATA) {@link https://binance-docs.github.io/apidocs/spot/en/#query-all-oco-user_data}
        *
        * @param {object} [options]
        * @param {number} [options.fromId] - Trade id to fetch from. Default gets most recent trades.
        * @param {number} [options.startTime] - UTC timestamp in ms
        * @param {number} [options.endTime] - UTC timestamp in ms
        * @param {number} [options.limit] - Default 500; max 1000.
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async getAllOco(options?: getAllOcoOptions): Promise<getAllOcoResponse[]> {

            const url = this.prepareSignedPath('/api/v3/allOrderList',
                options ? options : {}
            );
            return await this.makeRequest('GET', url);
        }


        /**
        * Query Open OCO (USER_DATA) {@link https://binance-docs.github.io/apidocs/spot/en/#query-open-oco-user_data}
        *
        * @param {object} [options]
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async getOpenOco(options?: getOpenOcoOptions): Promise<getOpenOcoResponse[]> {
            const url = this.prepareSignedPath('/api/v3/openOrderList',
                options ? options : {}
            );
            return await this.makeRequest('GET', url);
        }


        /**
        * Account Information (USER_DATA) {@link https://binance-docs.github.io/apidocs/spot/en/#account-information-user_data}
        *
        * @param {object} [options]
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async accountInformation(options?: accountInformationOptions): Promise<accountInformationResponse> {
            const url = this.prepareSignedPath('/api/v3/account',
                options ? options : {}
            );
            return await this.makeRequest('GET', url);
        }


        /**
        * Account Trade List (USER_DATA) {@link https://binance-docs.github.io/apidocs/spot/en/#account-trade-list-user_data}
        *
        * @param {string} symbol - Trading symbol, e.g. BNBUSDT
        * @param {object} [options]
        * @param {number} [options.orderId] - This can only be used in combination with symbol.
        * @param {number} [options.startTime] - UTC timestamp in ms
        * @param {number} [options.endTime] - UTC timestamp in ms
        * @param {number} [options.fromId] - Trade id to fetch from. Default gets most recent trades.
        * @param {number} [options.limit] - Default 500; max 1000.
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async accountTradeList(symbol: string, options?: accountTradeListOptions): Promise<accountTradeListResponse[]> {
            validateRequiredParameters({ symbol });
            const url = this.prepareSignedPath('/api/v3/myTrades',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase()
                    }
                )
            );
            return await this.makeRequest('GET', url);
        }


        /**
        * Query Current Order Count Usage (TRADE) {@link https://binance-docs.github.io/apidocs/spot/en/#query-current-order-count-usage-trade}
        *
        * @param {object} [options]
        * @param {number} [options.recvWindow] - The value cannot be greater than 60000
        */
        async getCurrentOrderCountUsage(options?: getCurrentOrderCountUsageOptions): Promise<getCurrentOrderCountUsageResponse[]> {

            const url = this.prepareSignedPath('/api/v3/rateLimit/order',
                options ? options : {}
            );
            return await this.makeRequest('GET', url);
        }

        /**
         * Test New Order Using SOR (TRADE) {@link https://binance-docs.github.io/apidocs/spot/en/#new-order-using-sor-trade}
         * 
         * @param {string} symbol - Trading symbol, e.g. BNBUSDT
         * @param {Side} side
         * @param {OrderType} type - Order type
         * @param {number} [quantity] - Order quantity
         * @param {object} [options]
         * @param {TimeInForce} [options.timeInForce] - Order time in force
         * @param {number} [options.price] - Order price
         * @param {string} [options.newClientOrderId] - Used to uniquely identify this cancel. Automatically generated by default
         * @param {number} [options.strategyId]
         * @param {number} [options.strategyType] - The value cannot be less than 1000000.
         * @param {number} [options.icebergQty] - Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
         * @param {NewOrderRespType} [options.newOrderRespType] - Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
         * @param {SelfTradePreventionMode} [options.selfTradePreventionMode] - The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
         * @param {number} [options.recvWindow] - The value cannot be greater than 60000
         * @param {boolean} [options.computeCommissionRates]
         */
        async testNewOrderSOR(symbol: string, side: Side, type: OrderType, quantity: number, options?: testNewOrderSOROptions): Promise<Record<string, never> | testNewOrderResponse> {
            validateRequiredParameters({ symbol, side, type, quantity });
            const url = this.prepareSignedPath('/api/v3/sor/order/test',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase(),
                        side: side,
                        type: type,
                        quantity: quantity
                    }
                )
            );
            return await this.makeRequest('POST', url);
        }


        /**
         * New Order Using SOR (TRADE) {@link https://binance-docs.github.io/apidocs/spot/en/#new-order-using-sor-trade}
         * 
         * @param {string} symbol - Trading symbol, e.g. BNBUSDT
         * @param {Side} side
         * @param {OrderType} type - Order type
         * @param {number} [quantity] - Order quantity
         * @param {object} [options]
         * @param {TimeInForce} [options.timeInForce] - Order time in force
         * @param {number} [options.price] - Order price
         * @param {string} [options.newClientOrderId] - Used to uniquely identify this cancel. Automatically generated by default
         * @param {number} [options.strategyId]
         * @param {number} [options.strategyType] - The value cannot be less than 1000000.
         * @param {number} [options.icebergQty] - Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
         * @param {NewOrderRespType} [options.newOrderRespType] - Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
         * @param {SelfTradePreventionMode} [options.selfTradePreventionMode] - The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
         * @param {number} [options.recvWindow] - The value cannot be greater than 60000
         */
        async newOrderSOR(symbol: string, side: Side, type: OrderType, quantity: number, options?: newOrderSOROptions): Promise<newOrderSORResponse> {
            validateRequiredParameters({ symbol, side, type, quantity });
            const url = this.prepareSignedPath('/api/v3/sor/order',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase(),
                        side: side,
                        type: type,
                        quantity: quantity
                    }
                )
            );
            return await this.makeRequest('POST', url);
        }

        /**
         * Query Prevented Matches (USER_DATA) {@link https://binance-docs.github.io/apidocs/spot/en/#query-prevented-matches-user_data}
         * 
         * @param {string} symbol - Trading symbol, e.g. BNBUSDT
         * @param {object} [options]
         * @param {number} [options.preventedMatchId]
         * @param {number} [options.orderId]
         * @param {number} [options.fromPreventedMatchId]
         * @param {number} [options.limit] - Default: 500; Max: 1000
         * @param {number} [options.recvWindow] - The value cannot be greater than 60000
         */
        async getPreventedMatches(symbol: string, options?: getPreventedMatchesOptions): Promise<getPreventedMatchesResponse[]> {
            validateRequiredParameters({ symbol });
            const url = this.prepareSignedPath('/api/v3/myPreventedMatches',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase()
                    }
                )
            );
            return await this.makeRequest('GET', url);
        }

        /**
         * Query Allocations (USER_DATA) {@link https://binance-docs.github.io/apidocs/spot/en/#query-allocations-user_data}
         * 
         * @param {string} symbol - Trading symbol, e.g. BNBUSDT
         * @param {object} [options]
         * @param {number} [options.startTime]
         * @param {number} [options.endTime]
         * @param {number} [options.fromAllocationId]
         * @param {number} [options.limit] - Default: 500; Max: 1000
         * @param {number} [options.orderId]
         * @param {number} [options.recvWindow] - The value cannot be greater than 60000
         */
        async getAllocations(symbol: string, options?: getAllocationsOptions): Promise<getAllocationsResponse[]> {
            validateRequiredParameters({ symbol });
            const url = this.prepareSignedPath('/api/v3/myAllocations',
                Object.assign(
                    options ? options : {},
                    {
                        symbol: symbol.toUpperCase()
                    }
                )
            );
            return await this.makeRequest('GET', url);
        }

        /**
         * Query Commission Rates (USER_DATA) {@link https://binance-docs.github.io/apidocs/spot/en/#query-commission-rates-user_data}
         * 
         * @param {string} symbol - Trading symbol, e.g. BNBUSDT
         */
        async getCommissionRates(symbol: string): Promise<getCommissionRatesResponse> {
            validateRequiredParameters({ symbol });
            const url = this.prepareSignedPath('/api/v3/account/commission',
                {
                    symbol: symbol.toUpperCase()
                }
            );
            return await this.makeRequest('GET', url);
        }
    };
}
